name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Rust Backend Tests and Checks
  backend-test:
    name: Backend Test & Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: miuchichat
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: miuchichat
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      meilisearch:
        image: getmeili/meilisearch:v1.5
        env:
          MEILI_MASTER_KEY: masterKey123
          MEILI_ENV: development
        options: >-
          --health-cmd "/bin/sh -c 'exec 3<>/dev/tcp/127.0.0.1/7700 && echo -e \"GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n\" >&3 && cat <&3'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
        ports:
          - 7700:7700

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install sqlx-cli
      run: cargo install sqlx-cli --no-default-features --features postgres

    - name: Setup environment
      run: |
        echo "DATABASE_URL=postgres://miuchichat:password123@localhost:5432/miuchichat" >> $GITHUB_ENV
        echo "GITHUB_CLIENT_ID=test_client_id" >> $GITHUB_ENV
        echo "GITHUB_CLIENT_SECRET=test_client_secret" >> $GITHUB_ENV
        echo "JWT_SECRET=test_jwt_secret_key_for_development_only_do_not_use_in_production" >> $GITHUB_ENV
        echo "RUST_LOG=debug" >> $GITHUB_ENV
        echo "MEILI_URL=http://localhost:7700" >> $GITHUB_ENV
        echo "MEILI_MASTER_KEY=masterKey123" >> $GITHUB_ENV

    - name: Wait for services
      run: |
        echo "Waiting for PostgreSQL..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U miuchichat; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Attempt $i: PostgreSQL not ready yet..."
          sleep 2
        done
        
        echo "Waiting for Meilisearch..."
        for i in {1..30}; do
          if curl -f -s http://localhost:7700/health >/dev/null 2>&1; then
            echo "Meilisearch is ready!"
            break
          fi
          echo "Attempt $i: Meilisearch not ready yet..."
          sleep 2
        done
        
        echo "All services are ready!"

    - name: Run database migrations
      run: |
        sqlx database create
        sqlx migrate run

    - name: Check Rust formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build project
      run: cargo build --verbose

    - name: Run unit tests
      run: cargo test --lib --verbose
      env:
        DATABASE_URL: postgres://miuchichat:password123@localhost:5432/miuchichat
        MEILI_URL: http://localhost:7700
        MEILI_MASTER_KEY: masterKey123
        
    - name: Run integration tests
      run: cargo test --test '*' --verbose
      env:
        DATABASE_URL: postgres://miuchichat:password123@localhost:5432/miuchichat
        MEILI_URL: http://localhost:7700
        MEILI_MASTER_KEY: masterKey123
        
    - name: Run all tests with services
      run: cargo test --verbose --all
      env:
        DATABASE_URL: postgres://miuchichat:password123@localhost:5432/miuchichat
        MEILI_URL: http://localhost:7700
        MEILI_MASTER_KEY: masterKey123

    - name: Check for unused dependencies
      run: |
        cargo install cargo-machete
        cargo machete

  # Frontend Tests and Checks
  frontend-test:
    name: Frontend Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8.0.0

    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('frontend/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Install dependencies
      working-directory: ./frontend
      run: pnpm install

    - name: TypeScript type check
      working-directory: ./frontend
      run: pnpm exec tsc --noEmit

    - name: Run ESLint
      working-directory: ./frontend
      run: pnpm run lint

    - name: Run tests with coverage
      working-directory: ./frontend
      run: pnpm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build frontend
      working-directory: ./frontend
      run: pnpm run build

    - name: Check build artifacts
      working-directory: ./frontend
      run: |
        ls -la dist/
        test -f dist/index.html

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Rust security audit
      uses: rustsec/audit-check@v1.4.1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js for frontend audit
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8.0.0

    - name: Frontend security audit
      working-directory: ./frontend
      run: |
        pnpm install
        pnpm audit --audit-level moderate

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ghcr.io/${{ github.repository }}-frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deployment (placeholder for future)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Placeholder for deployment
      run: |
        echo "Deployment configuration will be added here"
        echo "This could include:"
        echo "- Kubernetes deployment"
        echo "- Docker Compose deployment"
        echo "- Cloud provider specific deployment"
        echo "- Infrastructure as Code (Terraform, etc.)"